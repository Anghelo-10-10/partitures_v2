# 🎵 Partituras Musicales - API Spring Boot

Aplicación backend para la gestión de partituras musicales, desarrollada con **Spring Boot (Kotlin)**, **Spring Data JPA** y **PostgreSQL**.

Sistema completo para subir, gestionar, buscar y compartir partituras musicales en formato PDF con funcionalidades avanzadas de búsqueda, favoritos y sistema de usuarios.

---

## 📋 Requisitos previos

- **Java 21** (JDK 21)
- **PostgreSQL 15** o superior
- **Gradle 8** o superior
- **Git** (opcional)

---

## ⚙️ Configuración inicial

### 1. Clonar el repositorio
```bash
git clone https://github.com/Anghelo-10-10/partitures_v2.git
cd partitures
```

### 2. Iniciar Base de Datos con Docker
```bash
docker-compose up -d
```

### 3. Ejecutar el Proyecto
```bash
./gradlew bootRun
```

La aplicación se ejecuta en **http://localhost:8080/**

⚠️ **Nota**: La app actualmente es solo **API REST** (sin interfaz gráfica). Se puede probar con herramientas como **Postman**, **Insomnia** o **curl**.

---

## 🗄️ Conexión a Base de Datos (PgAdmin)

**Configuración de conexión:**

| Campo | Valor |
|-------|-------|
| **Host** | `localhost` |
| **Puerto** | `5433` |
| **Usuario** | `admin` |
| **Password** | `admin` |
| **Base de Datos** | `partitures_db` |

---

## 🚀 API Endpoints

### 🔐 **Autenticación** (`/api/auth`)

| Método | Endpoint | Descripción | Body |
|--------|----------|-------------|------|
| `POST` | `/login` | Iniciar sesión | `{"email": "user@email.com", "password": "password"}` |

### 👤 **Usuarios** (`/api/users`)

| Método | Endpoint | Descripción | Body/Params |
|--------|----------|-------------|-------------|
| `POST` | `/` | Crear usuario | `{"name": "Usuario", "email": "user@email.com", "password": "Password123"}` |
| `GET` | `/{id}` | Obtener usuario por ID | - |
| `PUT` | `/{id}` | Actualizar usuario | `{"name": "Nuevo Nombre", "email": "nuevo@email.com"}` |
| `DELETE` | `/{id}` | Eliminar usuario | - |
| `GET` | `/{id}/profile` | Obtener perfil público | - |
| `PUT` | `/profile` | Actualizar mi perfil | `?userId=1` + `{"name": "Nombre", "bio": "Mi biografía"}` |

### 🎼 **Partituras** (`/api/sheets`)

#### 📝 **CRUD Básico**
| Método | Endpoint | Descripción | Content-Type |
|--------|----------|-------------|--------------|
| `POST` | `/` | **Crear partitura con archivo PDF** | `multipart/form-data` |
| `GET` | `/{id}` | Obtener partitura por ID | - |
| `PUT` | `/{id}` | Actualizar metadatos de partitura | `application/json` |
| `PUT` | `/{id}/file` | Actualizar archivo PDF | `multipart/form-data` |
| `DELETE` | `/{id}` | Eliminar partitura | - |

#### 📄 **Visualización y Descarga de PDFs**
| Método | Endpoint | Descripción | Respuesta |
|--------|----------|-------------|-----------|
| `GET` | `/{id}/pdf` | **Ver PDF en navegador** | PDF inline |
| `GET` | `/{id}/pdf/download` | **Descargar PDF** | PDF attachment |

#### 🔍 **Búsqueda y Filtros**
| Método | Endpoint | Descripción | Parámetros |
|--------|----------|-------------|------------|
| `GET` | `/public` | Partituras públicas | - |
| `GET` | `/search` | Búsqueda simple | `?q=termino` |
| `GET` | `/search/advanced` | **Búsqueda avanzada** | `?searchTerm=&artist=&genre=&instrument=&sortBy=recent` |
| `GET` | `/genre/{genre}` | Filtrar por género | - |
| `GET` | `/instrument/{instrument}` | Filtrar por instrumento | - |
| `GET` | `/artist/{artist}` | Filtrar por artista | - |
| `GET` | `/recent` | Partituras recientes | - |
| `GET` | `/trending` | Partituras trending | - |

#### 📊 **Filtros Disponibles**
| Método | Endpoint | Descripción | Respuesta |
|--------|----------|-------------|-----------|
| `GET` | `/filters/genres` | Géneros disponibles | `["Rock", "Jazz", "Classical"]` |
| `GET` | `/filters/instruments` | Instrumentos disponibles | `["Piano", "Guitar", "Violin"]` |
| `GET` | `/filters/artists` | Artistas disponibles | `["Artist 1", "Artist 2"]` |

#### 👤 **Gestión por Usuario**
| Método | Endpoint | Descripción | Parámetros |
|--------|----------|-------------|------------|
| `GET` | `/users/{userId}/owned` | Partituras propias del usuario | - |
| `GET` | `/users/{userId}/favorites` | Partituras favoritas del usuario | - |

#### ⭐ **Sistema de Favoritos**
| Método | Endpoint | Descripción | Parámetros |
|--------|----------|-------------|------------|
| `POST` | `/{sheetId}/favorites` | Agregar a favoritos | `?userId=1` |
| `DELETE` | `/{sheetId}/favorites` | Quitar de favoritos | `?userId=1` |
| `GET` | `/{sheetId}/is-favorite` | Verificar si es favorito | `?userId=1` |

### 📁 **Archivos** (`/api/files`)

| Método | Endpoint | Descripción | Respuesta |
|--------|----------|-------------|-----------|
| `GET` | `/{fileName}` | Ver archivo | Archivo inline |
| `GET` | `/{fileName}/download` | Descargar archivo | Archivo attachment |
| `GET` | `/pdfs/{fileName}` | Ver PDF específico | PDF inline |
| `GET` | `/pdfs/{fileName}/download` | Descargar PDF específico | PDF attachment |

---

## 📝 **Ejemplo de Uso - Crear Partitura**

### Request
```http
POST /api/sheets
Content-Type: multipart/form-data

file: [archivo.pdf]
title: "Moonlight Sonata"
description: "Sonata No. 14 de Beethoven"
artist: "Ludwig van Beethoven"
genre: "Classical"
instrument: "Piano"
isPublic: true
ownerId: 1
```

### Response
```json
{
"id": 1,
"title": "Moonlight Sonata",
"description": "Sonata No. 14 de Beethoven",
"artist": "Ludwig van Beethoven",
"genre": "Classical",
"instrument": "Piano",
"pdfFilename": "1698765432_abc12345.pdf",
"pdfSize": 2048576,
"pdfSizeMB": "2.0 MB",
"pdfContentType": "application/pdf",
"pdfDownloadUrl": "/api/sheets/1/pdf",
"isPublic": true,
"ownerId": 1,
"createdAt": "2024-01-15T10:30:00",
"updatedAt": "2024-01-15T10:30:00"
}
```

---

## ⚡ **Características Técnicas Destacadas**

### 🔍 **Sistema de Búsqueda Avanzado**
- **Búsqueda por múltiples campos**: título, artista, descripción
- **Filtros combinables**: género, instrumento, artista
- **Ordenamiento**: por fecha, título, artista
- **Búsqueda insensible a mayúsculas/minúsculas**

### 📁 **Gestión de Archivos PDF**
- **Validación estricta**: tamaño (máx 5MB), tipo MIME, magic bytes
- **Almacenamiento**: PDFs guardados como BYTEA en PostgreSQL
- **Optimización**: Lazy loading para archivos grandes
- **URLs dinámicas**: visualización y descarga

### 👥 **Sistema de Usuarios y Permisos**
- **Autenticación**: Email + contraseña con validación robusta
- **Encriptación**: BCrypt para passwords
- **Propietarios**: Solo el owner puede modificar/eliminar
- **Perfiles**: Información pública + biografía

### ⭐ **Sistema de Favoritos Inteligente**
- **Relación Many-to-Many**: UserSheet con metadata
- **Estados duales**: `isOwner` (propietario) + `isFavorite` (favorito)
- **Gestión flexible**: Agregar/quitar favoritos independientemente

### 🚀 **Optimizaciones de Performance**
- **Anti N+1 Queries**: Batch loading de propietarios
- **Lazy Loading**: Contenido PDF cargado bajo demanda
- **Índices de BD**: Optimizados para búsquedas frecuentes
- **Queries nativas**: PostgreSQL ILIKE para búsquedas eficientes

### ⚠️ **Manejo de Errores Robusto**
- **Excepciones semánticas**: Por dominio (users, sheets, files)
- **Códigos HTTP correctos**: 404, 400, 409, 403, 500
- **Mensajes contextuales**: Con información específica del error
- **GlobalExceptionHandler**: Manejo centralizado

---

## 🗂️ **Estructura del Proyecto**

```
src/main/kotlin/com/partituresforall/partitures/
├── 🎮 controllers/          # API REST endpoints
│   ├── AuthController       # Autenticación
│   ├── UserController       # Gestión de usuarios
│   ├── SheetController      # Gestión de partituras
│   └── FileController       # Gestión de archivos
├── 🧠 services/             # Lógica de negocio
│   ├── UserService          # Operaciones de usuario
│   ├── SheetService         # Operaciones de partituras
│   ├── FileService          # Gestión de archivos
│   └── FileValidationService # Validaciones centralizadas
├── 🗄️ repositories/         # Acceso a datos (JPA)
│   ├── UserRepository       # Consultas de usuario
│   ├── SheetRepository      # Consultas de partituras
│   └── UserSheetRepository  # Relación usuario-partitura
├── 🏗️ models/               # Modelos de datos
│   ├── entities/            # Entidades JPA (User, Sheet, UserSheet)
│   ├── requests/            # DTOs de entrada
│   └── responses/           # DTOs de salida
├── ⚠️ exceptions/           # Manejo de errores
│   ├── exceptions/          # Excepciones custom por dominio
│   └── handlers/            # GlobalExceptionHandler
└── ⚙️ config/               # Configuraciones
└── PasswordEncoder      # Encoder BCrypt personalizado
```

---

## 🛠️ **Configuración Técnica**

| Tecnología | Versión | Propósito |
|------------|---------|-----------|
| **Spring Boot** | 3.5.0 | Framework principal |
| **Kotlin** | 1.9+ | Lenguaje de programación |
| **PostgreSQL** | 15 | Base de datos principal |
| **Hibernate** | 6.6.15 | ORM (Object-Relational Mapping) |
| **Docker** | - | Contenedor de PostgreSQL |
| **BCrypt** | - | Encriptación de contraseñas |

---

## 🔧 **Configuración de Desarrollo**

### Variables de Entorno (`application.yml`)
```yaml
spring:
datasource:
url: jdbc:postgresql://localhost:5433/partitures_db
username: admin
password: admin

servlet:
multipart:
max-file-size: 10MB
max-request-size: 10MB

app:
file:
upload-dir: uploads
```

### Docker Compose
```yaml
services:
postgres:
image: postgres:15
environment:
POSTGRES_DB: partitures_db
POSTGRES_USER: admin
POSTGRES_PASSWORD: admin
ports:
- "5433:5432"
```

---

## 🚀 **Próximas Mejoras Planeadas**

- [ ] **Autenticación JWT** + Spring Security
- [ ] **Validaciones @Valid** en controllers
- [ ] **Paginación** para endpoints de listas
- [ ] **Tests unitarios** e integración
- [ ] **Documentación Swagger/OpenAPI**
- [ ] **Cache Redis** para consultas frecuentes
- [ ] **Métricas y observabilidad**
- [ ] **Interfaz web frontend**

---

## 🧪 **Testing Manual**

Puedes probar la API usando **Postman**, **Insomnia** o **curl**:

```bash
# Crear usuario
curl -X POST http://localhost:8080/api/users \
-H "Content-Type: application/json" \
-d '{"name":"Test User","email":"test@example.com","password":"Password123"}'

# Login
curl -X POST http://localhost:8080/api/auth/login \
-H "Content-Type: application/json" \
-d '{"email":"test@example.com","password":"Password123"}'

# Obtener partituras públicas
curl http://localhost:8080/api/sheets/public
```

---

## 📞 **Contacto y Contribución**

- **Repositorio**: [GitHub - partitures_v2](https://github.com/Anghelo-10-10/partitures_v2)
- **Autor**: Anghelo-10-10
- **Stack**: Kotlin + Spring Boot + PostgreSQL

---

**¡La API está lista para ser consumida por cualquier frontend o aplicación móvil!** 🎵✨